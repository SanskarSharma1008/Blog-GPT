import boto3
import botocore.config
import json
from datetime import datetime

def blog_generate_using_bedrock(blogtopic: str) -> str:
    prompt = f"""<s>[INST]Human: Write a 200 words blog on the topic {blogtopic}
    Assistant:[/INST]"""
    body = {
        "prompt": prompt,
        "max_gen_len": 512,
        "temperature": 0.5,
        "top_p": 0.9
    }
    try:
        bedrock = boto3.client(
            "bedrock-runtime",
            region_name="us-east-1",
            config=botocore.config.Config(read_timeout=300, retries={'max_attempts': 3})
        )
        response = bedrock.invoke_model(
            body=json.dumps(body),
            modelId="meta.llama3-70b-instruct-v1:0"
        )
        response_content = response.get('body').read()
        response_data = json.loads(response_content)
        blog_details = response_data.get('generation', '')
        return blog_details
    except Exception as e:
        print(f"Error generating the blog: {e}")
        return ""

def translate_blog_text(text: str, target_language: str) -> str:
    translate = boto3.client("translate", region_name="us-east-1")
    try:
        result = translate.translate_text(
            Text=text,
            SourceLanguageCode="en",
            TargetLanguageCode=target_language
        )
        return result["TranslatedText"]
    except Exception as e:
        print(f"Error translating blog: {e}")
        return text

def save_blog_details_s3(s3_key, s3_bucket, generate_blog):
    s3 = boto3.client('s3')
    try:
        s3.put_object(
            Bucket=s3_bucket,
            Key=s3_key,
            Body=generate_blog,
            ContentType='text/plain'
        )
        print("Blog saved to S3")
    except Exception as e:
        print(f"Error when saving the blog to S3: {e}")

def send_blog_via_email(to_email, blog_topic, blog_content):
    ses = boto3.client('ses', region_name='us-east-1')
    sender_email = 'sanskarsharma803@gmail.com'  # Ensure verified

    try:
        json_body = json.dumps({
            "topic": blog_topic,
            "blog": blog_content
        }, indent=2)

        response = ses.send_email(
            Source=sender_email,
            Destination={'ToAddresses': [to_email]},
            Message={
                'Subject': {'Data': f"Your Blog on: {blog_topic}"},
                'Body': {'Text': {'Data': json_body}}
            }
        )
        print("Email sent successfully. Message ID:", response['MessageId'])
    except Exception as e:
        print(f"Error sending email: {e}")

def lambda_handler(event, context):
    print(f"Incoming event: {json.dumps(event)}")

    if 'body' not in event:
        return {
            'statusCode': 400,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST,OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type'
            },
            'body': json.dumps('Missing body in request')
        }

    try:
        event_body = json.loads(event['body']) if isinstance(event['body'], str) else event['body']

        # âœ… Extract input fields
        blogtopic = event_body.get("blog_topic")
        user_email = event_body.get("email")
        target_language = event_body.get("target_language")

        if not blogtopic or not user_email:
            return {
                'statusCode': 400,
                'headers': {
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Methods': 'POST,OPTIONS',
                    'Access-Control-Allow-Headers': 'Content-Type'
                },
                'body': json.dumps('Missing blog_topic or email in request')
            }

        generate_blog = blog_generate_using_bedrock(blogtopic=blogtopic)

        if generate_blog and target_language:
            generate_blog = translate_blog_text(generate_blog, target_language)

        if generate_blog:
            current_time = datetime.now().strftime('%Y%m%d-%H%M%S')
            s3_key = f"blog-output/{current_time}.txt"
            s3_bucket = 'awsappbu'
            save_blog_details_s3(s3_key, s3_bucket, generate_blog)
            send_blog_via_email(user_email, blogtopic, generate_blog)

        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST,OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type'
            },
            'body': json.dumps({
                'message': 'Blog generated, translated (if requested), saved, and emailed',
                'blog_content': generate_blog
            })
        }

    except Exception as e:
        print(f"Lambda Handler Error: {e}")
        return {
            'statusCode': 500,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST,OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type'
            },
            'body': json.dumps('Internal server error')
        }
